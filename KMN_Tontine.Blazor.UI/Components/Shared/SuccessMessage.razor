@if (!string.IsNullOrEmpty(Message))
{
    <div class="rounded-md bg-green-50 p-4 mb-4">
        <div class="flex">
            <div class="flex-shrink-0">
                <svg class="h-5 w-5 text-green-400" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                </svg>
            </div>
            <div class="ml-3">
                <h3 class="text-sm font-medium text-green-800">
                    Succ√®s
                </h3>
                <div class="mt-2 text-sm text-green-700">
                    <p>@Message</p>
                </div>
                @if (ShowDismissButton)
                {
                    <div class="mt-4">
                        <div class="-mx-2 -my-1.5 flex">
                            <button @onclick="OnDismiss" class="bg-green-50 px-2 py-1.5 rounded-md text-sm font-medium text-green-800 hover:bg-green-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-green-50 focus:ring-green-600">
                                Fermer
                            </button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string Message { get; set; }

    [Parameter]
    public bool ShowDismissButton { get; set; } = true;

    [Parameter]
    public EventCallback OnDismiss { get; set; }

    [Parameter]
    public int AutoDismissAfterSeconds { get; set; } = 0;

    protected override async Task OnParametersSetAsync()
    {
        if (AutoDismissAfterSeconds > 0 && !string.IsNullOrEmpty(Message))
        {
            await Task.Delay(AutoDismissAfterSeconds * 1000);
            if (OnDismiss.HasDelegate)
            {
                await OnDismiss.InvokeAsync();
            }
        }
    }
} 