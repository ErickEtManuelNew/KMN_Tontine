@* MainNav.razor *@
@using KMN_Tontine.Blazor.UI.Locales
@using Microsoft.Extensions.Localization
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation
@inject IAuthService AuthenticationService
@inject CurrentUserService CurrentUserServ
@inject IStringLocalizer<Resource> localizer
@inject LanguageService LangService

<div class="h-screen flex overflow-hidden bg-gray-100" style="height: auto">
    <!-- Sidebar Desktop -->
    <SidebarDesktop NavigationItems="NavigationItems" UserName=@CurrentUserServ.FullName OnLogout="HandleLogout" />

    <!-- Sidebar Mobile -->
    <SidebarMobile NavigationItems="NavigationItems" UserName=@CurrentUserServ.FullName IsOpen="isSidebarOpen" ToggleSidebar="ToggleSidebar" />

    <!-- Bouton Mobile -->
    <button @onclick="ToggleSidebar"
    class="md:hidden fixed top-4 left-4 bg-indigo-600 text-white p-2 rounded-md shadow-lg z-50">
        ☰
    </button>

    <!-- Sélecteur de langue -->
    <div class="fixed top-4 right-4 z-50">
        <LanguageSelector />
    </div>
</div>

@code {
    private List<NavItem> NavigationItems = new();
    private string userName = "Invité";
    private bool isSidebarOpen = false;

    protected override async Task OnInitializedAsync()
    {
        var culture = await LangService.GetCultureAsync();
        await LangService.SetCultureAsync(culture);

        await CurrentUserServ.LoadUserInfoAsync();

        NavigationItems = new()
        {
            new NavItem(localizer["Home"], "/dashboard", "fas fa-home", "Tous")
        };

        if (CurrentUserServ.IsAdmin)
        {
            NavigationItems.AddRange(new[]
            {
                new NavItem(localizer["Members"], "/admin/members", "fas fa-users", "Admin"),
                new NavItem(localizer["PendingMembers"], "/admin/pending-members", "fas fa-user-clock", "Admin"),
                new NavItem(localizer["Accounts"], "/admin/allaccounts", "fas fa-university", "Admin"),
                new NavItem(localizer["Transactions"], "/admin/transactions", "fas fa-exchange-alt", "Admin"),
                new NavItem(localizer["Payments"], "/admin/payment-promises", "fas fa-money-check-alt", "Admin"),
                new NavItem(localizer["Reports"], "/admin/reports", "fas fa-chart-bar", "Admin"),
                new NavItem(localizer["Settings"], "/admin/settings", "fas fa-cog", "Admin")
            });
        }

        if (CurrentUserServ.IsMember)
        {
            NavigationItems.AddRange(new[]
            {
                new NavItem(localizer["MyAccounts"], "/myaccounts", "fas fa-wallet", "Member"),
                new NavItem(localizer["MyTransactions"], "/transactions", "fas fa-history", "Member"),
                new NavItem(localizer["Payments"], "/payments", "fas fa-money-check-alt", "Member"),
                new NavItem(localizer["MyProfile"], "/profile", "fas fa-user-cog", "Member")
            });
        }
    }

    private void ToggleSidebar() => isSidebarOpen = !isSidebarOpen;

    private async Task HandleLogout()
    {
        await AuthenticationService.LogoutAsync();
        Navigation.NavigateTo("/login");
    }

    public class NavItem
    {
        public NavItem(string label, string url, string icon, string role)
        {
            Label = label;
            Url = url;
            Icon = icon;
            Role = role;
        }

        public string Label { get; set; }
        public string Url { get; set; }
        public string Icon { get; set; }
        public string Role { get; set; }
    }
}