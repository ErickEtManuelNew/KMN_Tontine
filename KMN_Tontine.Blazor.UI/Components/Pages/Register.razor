@page "/register"

@using KMN_Tontine.Blazor.UI.Services
@using KMN_Tontine.Blazor.UI.Services.Base
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<div class="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
        <div>
            <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">
                Créer un compte
            </h2>
        </div>
        <EditForm Model="@registerModel" OnValidSubmit="HandleRegistration" class="mt-8 space-y-6">
            <DataAnnotationsValidator />
            <div class="rounded-md shadow-sm -space-y-px">
                <div class="mb-4">
                    <label for="email" class="sr-only">Email</label>
                    <InputText id="email" @bind-Value="registerModel.Email" class="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm" placeholder="Email" />
                    <ValidationMessage For="@(() => registerModel.Email)" />
                </div>
                <div class="mb-4">
                    <label for="password" class="sr-only">Mot de passe</label>
                    <InputText type="password" id="password" @bind-Value="registerModel.Password" class="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm" placeholder="Mot de passe" />
                    <ValidationMessage For="@(() => registerModel.Password)" />
                </div>
                <div class="mb-4">
                    <label for="nom" class="sr-only">Nom</label>
                    <InputText id="nom" @bind-Value="registerModel.LastName" class="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm" placeholder="Nom" />
                    <ValidationMessage For="@(() => registerModel.LastName)" />
                </div>
                <div class="mb-4">
                    <label for="prenom" class="sr-only">Prénom</label>
                    <InputText id="prenom" @bind-Value="registerModel.FirstName" class="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm" placeholder="Prénom" />
                    <ValidationMessage For="@(() => registerModel.FirstName)" />
                </div>
                <div>
                    <label for="typeMembre" class="sr-only">Type de membre</label>
                    <InputSelect id="typeMembre" @bind-Value="registerModel.Role" class="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm">
                        <option value="">Sélectionnez un type de membre</option>
                        <option value="@RoleType._0">Membre</option>
                        <option value="@RoleType._1">Administrateur</option>
                        <option value="@RoleType._2">Super Administrateur</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => registerModel.Role)" />
                </div>
            </div>

            @if (!string.IsNullOrEmpty(message))
            {
                <div class="@(isError ? "text-red-500" : "text-green-500") text-sm mt-2">
                    @message
                </div>
            }

            <div>
                <button type="submit" disabled="@isLoading" class="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm mr-1" role="status" aria-hidden="true"></span>
                        <span>Inscription en cours...</span>
                    }
                    else
                    {
                        <span>S'inscrire</span>
                    }
                </button>
            </div>
        </EditForm>
        <div class="text-center mt-4">
            <a href="/login" class="font-medium text-indigo-600 hover:text-indigo-500">
                Déjà inscrit ? Se connecter
            </a>
        </div>
    </div>
</div>

@code {
    private RegisterRequest registerModel = new();
    private string message;
    private bool isError;
    private bool isLoading;

    private async Task HandleRegistration()
    {
        isLoading = true;
        message = string.Empty;
        isError = false;

        try
        {
            var response = await AuthService.RegisterAsync(registerModel);
            if (response != null)
            {
                message = response.Message ?? "Inscription réussie ! Vous pouvez maintenant vous connecter.";
                isError = false;
                await Task.Delay(2000); // Attendre 2 secondes avant la redirection
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                message = "Une erreur est survenue lors de l'inscription.";
                isError = true;
            }
        }
        catch (ApiException ex)
        {
            message = ex.Message;
            isError = true;
        }
        catch (Exception ex)
        {
            message = "Une erreur est survenue lors de l'inscription.";
            isError = true;
        }
        finally
        {
            isLoading = false;
        }
    }
} 