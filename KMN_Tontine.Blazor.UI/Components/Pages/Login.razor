@page "/login"

@using KMN_Tontine.Blazor.UI.Helpers
@using KMN_Tontine.Blazor.UI.Services
@using KMN_Tontine.Blazor.UI.Services.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@inject IAuthenticationService AuthenticationService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Connexion - KMN Tontine</PageTitle>

<div class="min-h-screen flex items-center justify-center bg-gradient-to-br from-indigo-100 to-purple-100">
    <div class="bg-white shadow-xl rounded-xl p-8 max-w-md w-full">
        <div class="alert alert-info text-center shadow rounded mb-4">
            üôè Bienvenue sur <strong>KMN Tontine</strong>, votre espace de gestion solidaire üíº
        </div>
        <p class="text-center text-gray-600 mb-6">Connectez-vous pour acc√©der √† votre espace personnel.</p>

        @if (_error)
        {
            <div class="alert alert-danger" role="alert">
                <center>
                    <strong>@_errorMessage</strong>
                </center>
            </div>
        }

        @if (!string.IsNullOrEmpty(_successMessage))
        {
            <div class="alert alert-success">@_successMessage</div>
        }

        <EditForm Model="_loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />

            <div class="mb-3">
                <label class="form-label">Email</label>
                <InputText type="email" class="form-control" @bind-Value="_loginModel.Email" />
                <ValidationMessage For="@(() => _loginModel.Email)" class="text-danger" />
            </div>

            <div class="mb-3">
                <label class="form-label">Mot de passe</label>
                <InputText type="password" class="form-control" @bind-Value="_loginModel.Password" />
                <ValidationMessage For="@(() => _loginModel.Password)" class="text-danger" />
            </div>

            <button type="submit" class="btn btn-primary w-100">
                @if (_loading)
                {
                    <span class="spinner-border spinner-border-sm"></span>
                }
                Se connecter
            </button>
        </EditForm>

        <p class="mt-4 text-sm text-center text-gray-600">
            Pas encore inscrit ?
            <a href="/register" class="text-indigo-600 hover:underline">Cr√©er un compte</a>
        </p>
    </div>
</div>

@code {
    private LoginRequest _loginModel = new();
    private bool _loading;
    private bool _error;
    private string _errorMessage = string.Empty;
    private string? _successMessage;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated ?? false)
        {
            NavigationManager.NavigateTo("/dashboard");
        }
    }

    private async Task HandleLogin()
    {
        try
        {
            _loading = true;
            _error = false;

            // V√©rifier le mot de passe
            // bool isPasswordValid = PasswordHelper.VerifyPassword(user.PasswordHash, _loginModel.Password);

            // if (!isPasswordValid)
            // {
            //     _errorMessage = "E-mail ou mot de passe incorrect.";
            //     return;
            // }
            var result = await AuthenticationService.AuthenticateAsync(_loginModel);

            if (result.Data.IsSuccess)
            {
                _successMessage = "üéâ Connexion r√©ussie ! Bienvenue ‚ú®";
                _errorMessage = null;

                await Task.Delay(5000);
                NavigationManager.NavigateTo("/dashboard");
            }
            else
            {
                _error = true;
                _errorMessage = result.Data.Message;
                _successMessage = null;
            }
        }
        catch (ApiException ex)
        {
            _error = true;
            _errorMessage = ex.Message;
            _successMessage = null;
        }
        finally
        {
            _loading = false;
        }
    }
} 