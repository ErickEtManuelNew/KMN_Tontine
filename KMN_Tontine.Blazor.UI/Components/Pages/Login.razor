@page "/login"

@using KMN_Tontine.Blazor.UI.Services
@using KMN_Tontine.Blazor.UI.Services.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@inject IAuthenticationService AuthenticationService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Connexion - KMN Tontine</PageTitle>

<div class="d-flex justify-content-center align-items-center vh-100 bg-light">
    <div class="card shadow p-4 w-50">
        <h2 class="text-center text-primary mb-4">ðŸ”‘ Connexion</h2>

        @if (_error)
        {
            <div class="alert alert-danger" role="alert">
                <strong>Erreur :</strong> @_errorMessage
            </div>
        }

        <EditForm Model="_loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />

            <div class="mb-3">
                <label class="form-label">Email</label>
                <InputText type="email" class="form-control" @bind-Value="_loginModel.Email" />
                <ValidationMessage For="@(() => _loginModel.Email)" class="text-danger" />
            </div>

            <div class="mb-3">
                <label class="form-label">Mot de passe</label>
                <InputText type="password" class="form-control" @bind-Value="_loginModel.Password" />
                <ValidationMessage For="@(() => _loginModel.Password)" class="text-danger" />
            </div>

            <button type="submit" class="btn btn-primary w-100">
                @if (_loading)
                {
                    <span class="spinner-border spinner-border-sm"></span>
                }
                Se connecter
            </button>
        </EditForm>

        <div class="text-center mt-3">
            <a href="/register" class="text-primary">Pas encore inscrit ? CrÃ©er un compte</a>
        </div>
    </div>
</div>

@code {
    private LoginRequest _loginModel = new();
    private bool _loading;
    private bool _error;
    private string _errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated ?? false)
        {
            NavigationManager.NavigateTo("/dashboard");
        }
    }

    private async Task HandleLogin()
    {
        try
        {
            _loading = true;
            _error = false;
            await AuthenticationService.AuthenticateAsync(_loginModel);
            NavigationManager.NavigateTo("/dashboard");
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = ex.Message;
        }
        finally
        {
            _loading = false;
        }
    }
} 