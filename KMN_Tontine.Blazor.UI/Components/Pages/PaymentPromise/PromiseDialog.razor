@using System.Net.Http.Headers
@inject IClient Client
@inject CurrentUserService CurrentUser

@if (IsOpen)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center overflow-y-auto py-4">
        <div class="bg-white rounded-lg shadow-xl w-full max-w-xl mx-4">
            <div class="flex justify-between items-center p-4 border-b">
                <h3 class="text-lg font-semibold">
                    @(IsEdit ? "Modifier la promesse" : "Nouvelle promesse de paiement")
                </h3>
                <button class="text-gray-500 hover:text-gray-700" @onclick="Close">
                    ✕
                </button>
            </div>

            @if (isLoading)
            {
                <div class="p-4 text-center">
                    <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600 mx-auto"></div>
                    <p class="mt-2 text-gray-600">Chargement...</p>
                </div>
            }
            else
            {
                <div class="p-4">
                    <EditForm Model="@promiseEntries" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <div class="overflow-x-auto mb-4">
                            <table class="w-full text-sm">
                                <thead>
                                    <tr class="bg-gray-50">
                                        <th class="px-3 py-2 text-left">Comptes</th>
                                        <th class="px-3 py-2 text-left">Solde</th>
                                        <th class="px-3 py-2 text-left">Montant promis</th>
                                    </tr>
                                </thead>
                                <tbody class="divide-y divide-gray-100">
                                    @foreach (var entry in promiseEntries)
                                    {
                                        <tr>
                                            <td class="px-3 py-2">@entry.AccountType.ToString()</td>
                                            <td class="px-3 py-2">@entry.Balance.ToString("N0")</td>
                                            <td class="px-3 py-2">
                                                @if (entry.AccountType == AccountType.Prive)
                                                {
                                                    <span class="text-gray-500 text-sm">(non editable)</span>
                                                }
                                                else
                                                {
                                                    <InputNumber class="w-24 px-2 py-1 border rounded text-sm" 
                                                               @bind-Value="entry.Amount" />
                                                }
                                            </td>
                                        </tr>
                                    }
                                    <tr class="bg-gray-50 font-semibold">
                                        <td colspan="2" class="px-3 py-2 text-right">Total :</td>
                                        <td class="px-3 py-2">@TotalPromiseAmount.ToString("N0")</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>

                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700 mb-1">Date prévue</label>
                            <InputDate class="w-full px-3 py-2 border rounded text-sm" @bind-Value="promiseDate" />
                        </div>

                        @if (showConfirmation)
                        {
                            <div class="space-y-4 mb-4 text-center">
                                <div class="bg-gray-50 p-3 rounded-lg text-sm">
                                    <p class="text-gray-700 mb-2">Utilisez votre institution bancaire pour le paiement.</p>
                                    <p class="text-gray-700 mb-2">
                                        Référence : <span class="font-mono font-bold">@reference</span>
                                    </p>
                                    <p class="text-gray-700">Cette référence doit être indiquée lors du paiement.</p>
                                </div>

                                <div class="text-center">
                                    <p class="text-xs text-gray-600">
                                        Cliquez sur Payer pour valider (délai 2 jours) ou Annuler pour supprimer.
                                    </p>
                                </div>
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(message))
                        {
                            <div class="p-3 mb-4 rounded text-sm @(isSuccess ? "bg-green-100 text-green-700" : "bg-red-100 text-red-700")">
                                @message
                            </div>
                        }

                        <div class="flex justify-end space-x-3">
                            <button type="button" class="px-4 py-2 bg-gray-200 rounded hover:bg-gray-300 text-sm"
                                    @onclick="Close">
                                Annuler
                            </button>
                            <button type="submit" class="px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700 text-sm">
                                @if (IsEdit)
                                {
                                    <text>Modifier</text>
                                }
                                else if (showConfirmation)
                                {
                                    <text>Payer</text>
                                }
                                else
                                {
                                    <text>Continuer</text>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
            }
        </div>
    </div>
}

@code {
    public class PromiseEntry
    {
        public int AccountId { get; set; }
        public AccountType AccountType { get; set; }
        public decimal Balance { get; set; }
        public decimal Amount { get; set; }
    }

    [Parameter] public Guid MemberId { get; set; }
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }
    [Parameter] public EventCallback OnPromiseCreated { get; set; }
    [Parameter] public int? PromiseId { get; set; }
    [Parameter] public bool IsEdit { get; set; }

    private List<PromiseEntry> promiseEntries = new();
    private string memberName;
    private string tontineName;
    private string message;
    private bool isLoading;
    private bool isSuccess;
    private DateTime promiseDate = DateTime.Today;
    private bool showConfirmation = false;
    private decimal privateAccountBalance = 0;
    private string reference;

    private decimal TotalPromiseAmount => promiseEntries.Sum(e => e.Amount);

    protected override async Task OnParametersSetAsync()
    {
        if (IsOpen && (MemberId != Guid.Empty || IsEdit))
        {
            message = null;
            isSuccess = false;
            isLoading = true;
            promiseEntries.Clear();

            try
            {
                // Charger les informations du membre
                memberName = CurrentUser.FullName;

                if (IsEdit && PromiseId.HasValue)
                {
                    // Mode édition : charger la promesse existante
                    Client.HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", CurrentUser.AccessToken);
                    var promise = await Client.PaymentPromisesGETAsync(PromiseId.Value);
                    promiseDate = promise.PromiseDate;
                    reference = promise.Reference;
                    
                    // Charger les comptes du membre pour avoir les soldes actuels
                    var accounts = (await Client.MemberAsync(MemberId)).ToList();
                    
                    // Créer les entrées à partir des comptes de la promesse
                    promiseEntries = promise.Accounts.Select(pa => new PromiseEntry
                    {
                        AccountId = pa.AccountId,
                        AccountType = pa.AccountType,
                        Balance = accounts.FirstOrDefault(a => a.Id == pa.AccountId)?.Balance ?? 0,
                        Amount = pa.AmountPromised
                    }).ToList();

                    var privateAccount = accounts.FirstOrDefault(a => a.Type == AccountType.Prive);
                    if (privateAccount != null)
                    {
                        privateAccountBalance = privateAccount.Balance;
                    }
                }
                else
                {
                    // Mode création : charger les comptes du membre
                    var accounts = (await Client.MemberAsync(MemberId)).ToList();
                    promiseEntries = accounts.Select(a => new PromiseEntry
                    {
                        AccountId = a.Id,
                        AccountType = a.Type,
                        Balance = a.Balance,
                        Amount = 0
                    }).ToList();

                    var privateAccount = accounts.FirstOrDefault(a => a.Type == AccountType.Prive);
                    if (privateAccount != null)
                    {
                        privateAccountBalance = privateAccount.Balance;
                    }

                    // Générer une nouvelle référence
                    reference = ReferenceGenerator.GeneratePromiseReference();
                }
            }
            catch (Exception ex)
            {
                message = $"Erreur lors du chargement : {ex.Message}";
                isSuccess = false;
            }
            finally
            {
                isLoading = false;
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        if (!IsEdit && !showConfirmation)
        {
            showConfirmation = true;
            return;
        }

        await CreateOrUpdatePromise();
    }

    private async Task CreateOrUpdatePromise()
    {
        try
        {
            if (IsEdit)
            {
                var updateRequest = new UpdatePaymentPromiseRequest
                {
                    Id = PromiseId.Value,
                    PromiseDate = promiseDate,
                    Accounts = promiseEntries.Select(e => new UpdatePaymentPromiseAccountRequest
                    {
                        AccountId = e.AccountId,
                        AmountPromised = e.Amount
                    }).ToList()
                };

                Client.HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", CurrentUser.AccessToken);
                var result = await Client.PaymentPromisesPUTAsync(PromiseId.Value, updateRequest);
                if (result.Success)
                {
                    await OnPromiseCreated.InvokeAsync();
                    await Close();
                }
                else
                {
                    message = result.Message;
                    isSuccess = false;
                }
            }
            else
            {
                var createRequest = new CreatePaymentPromiseRequest
                {
                    MemberId = MemberId.ToString(),
                    PromiseDate = promiseDate,
                    Reference = reference,
                    Accounts = promiseEntries.Select(e => new CreatePaymentPromiseAccountRequest
                    {
                        AccountId = e.AccountId,
                        AmountPromised = e.Amount
                    }).ToList()
                };

                Client.HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", CurrentUser.AccessToken);
                var result = await Client.PaymentPromisesPOSTAsync(createRequest);
                if (result.Success)
                {
                    await OnPromiseCreated.InvokeAsync();
                    await Close();
                }
                else
                {
                    message = result.Message;
                    isSuccess = false;
                }
            }
        }
        catch (Exception ex)
        {
            message = $"Erreur lors de la sauvegarde : {ex.Message}";
            isSuccess = false;
        }
    }

    private async Task Close()
    {
        showConfirmation = false;
        await IsOpenChanged.InvokeAsync(false);
    }
} 