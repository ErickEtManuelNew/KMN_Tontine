@using KMN_Tontine.Blazor.UI.Services.Base
@inject IClient Client
@inject CurrentUserService CurrentUser

@if (IsOpen)
{
    <div class="fixed inset-0 bg-gray-600 bg-opacity-10 overflow-y-auto h-full w-full z-50 flex items-center justify-center" @onclick="AttemptCloseOutside">
        <div class="relative mx-auto p-6 border w-full max-w-lg shadow-lg rounded-md bg-white" @onclick:stopPropagation>
            <div class="mt-3">
                <h3 class="text-xl leading-6 font-medium text-gray-900 mb-6 text-center">
                    ü§ù Make a Promise
                </h3>

                @if (account != null)
                {
                    <div class="bg-white rounded p-4 mb-6">
                        <h4 class="text-lg font-semibold text-gray-800">Account: @account.Type.ToString()</h4>
                        <p class="text-sm text-gray-500">Balance: @account.Balance.ToString("C")</p>
                    </div>

                    <EditForm Model="promiseRequest" OnValidSubmit="HandleSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="mb-4 text-red-600" />

                        <div class="mb-4">
                            <label class="block font-medium text-gray-700">Amount</label>
                            <InputNumber class="form-input mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md" @bind-Value="promiseRequest.AmountPromised" />
                        </div>

                        <div class="mb-4">
                            <label class="block font-medium text-gray-700">Planned date (optional)</label>
                            <InputDate class="form-input mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md" @bind-Value="promiseRequest.PromiseDate" />
                        </div>

                        @if (!string.IsNullOrWhiteSpace(message))
                        {
                            <div class="my-3 p-3 @(isSuccess ? "bg-green-100 text-green-700" : "bg-red-100 text-red-700") rounded text-sm">
                                @message
                            </div>
                        }

                        <div class="items-center py-3 sm:flex sm:flex-row-reverse border-t mt-4">
                            <button type="submit" 
                                class="inline-flex justify-center w-full sm:w-auto rounded-md border border-transparent shadow-sm px-4 py-2 bg-yellow-500 text-base font-medium text-white hover:bg-yellow-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500 sm:ml-3 sm:text-sm @(isLoading ? "opacity-50" : "")" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                    </svg>
                                    <span>Submitting...</span>
                                }
                                else
                                {
                                    <span>Submit Promise</span>
                                }
                            </button>
                            <button type="button"
                                class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:w-auto sm:text-sm @(isLoading ? "opacity-50" : "")"
                                @onclick="HandleClose" disabled="@isLoading">
                                Cancel
                            </button>
                        </div>
                    </EditForm>
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int AccountId { get; set; }
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }
    [Parameter] public EventCallback OnPromiseCreated { get; set; }

    private CreatePaymentPromiseRequest promiseRequest = new();
    private string? message;
    private bool isLoading = false;
    private bool isSuccess = false;
    private AccountResponse? account;

    protected override async Task OnParametersSetAsync()
    {
        if (IsOpen && AccountId > 0)
        {
            promiseRequest = new CreatePaymentPromiseRequest
            {
                AccountId = AccountId,
                MemberId = CurrentUser.UserId,
                PromiseDate = DateTime.Today
            };
            
            message = null;
            isSuccess = false;
            isLoading = false;
            
            try
            {
                account = await Client.AccountsGETAsync(AccountId);
            }
            catch (Exception)
            {
                message = "Failed to load account information.";
                isSuccess = false;
            }
        }
    }

    private async Task HandleSubmit()
    {
        if (isLoading) return;
        
        isLoading = true;
        message = null;
        StateHasChanged();
        
        try
        {
            Client.HttpClient.DefaultRequestHeaders.Authorization = 
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", CurrentUser.AccessToken);
            
            var result = await Client.PaymentPromisesPOSTAsync(promiseRequest);
            
            if (result.Success)
            {
                message = "Promise registered successfully!";
                isSuccess = true;
                await Task.Delay(2000);
                await OnPromiseCreated.InvokeAsync();
                await CloseDialog();
            }
            else
            {
                message = result.Message;
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            message = $"An error occurred: {ex.Message}";
            isSuccess = false;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task CloseDialog()
    {
        if (isLoading) return;
        await IsOpenChanged.InvokeAsync(false);
    }

    private async Task HandleClose()
    {
        await CloseDialog();
    }

    private async Task AttemptCloseOutside()
    {
        await CloseDialog();
    }
} 