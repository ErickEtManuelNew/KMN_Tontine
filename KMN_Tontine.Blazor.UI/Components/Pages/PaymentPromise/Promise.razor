@page "/promise/{accountId:int}"
@attribute [Authorize]
@inject KMN_Tontine.Blazor.UI.Services.Base.IClient Client
@inject NavigationManager Navigation
@inject CurrentUserService CurrentUser
@using KMN_Tontine.Blazor.UI.Services.Base
@using System.Net.Http.Headers

<h3 class="text-2xl font-bold text-indigo-700 mb-6">🤝 Make a Promise</h3>

@if (!isAuthorized)
{
    <div class="text-red-600 font-semibold">You must be logged in to access this page.</div>
}
else
{
    @if (string.IsNullOrEmpty(message))
    {
        <div class="bg-white shadow rounded p-4 mb-6">
            <h4 class="text-lg font-semibold text-gray-800">Account: @account.Type.ToString()</h4>
            <p class="text-sm text-gray-500">Balance: @account.Balance.ToString("C")</p>
        </div>

        <EditForm Model="promiseRequest" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary class="mb-4 text-red-600" />

            <div class="mb-4">
                <label class="block font-medium text-gray-700">Amount</label>
                <InputNumber class="form-input mt-1 block w-full" @bind-Value="promiseRequest.AmountPromised" />
            </div>

            <div class="mb-4">
                <label class="block font-medium text-gray-700">Planned date (optional)</label>
                <InputDate class="form-input mt-1 block w-full" @bind-Value="promiseRequest.PromiseDate" />
            </div>

            <button type="submit" class="bg-yellow-500 hover:bg-yellow-600 text-white px-4 py-2 rounded">
                Submit Promise
            </button>
        </EditForm>
    }
    else
    {
        <div class="mt-4 text-green-600 font-medium">@message</div>
    }
}

@code {
    [Parameter] public int accountId { get; set; }
    private CreatePaymentPromiseRequest promiseRequest = new();
    private string? message;
    private bool isAuthorized = false;
    private AccountResponse account;

    protected override async Task OnInitializedAsync()
    {
        await CurrentUser.LoadUserInfoAsync();

        if (string.IsNullOrEmpty(CurrentUser.UserName))
        {
            isAuthorized = false;
            Navigation.NavigateTo("/login");
            return;
        }
        promiseRequest.PromiseDate = DateTime.Today; // 📅 Initialise à aujourd'hui
        isAuthorized = true;
        promiseRequest.AccountId = accountId;
        promiseRequest.MemberId = CurrentUser.UserId;
        account = await Client.AccountsGETAsync(accountId);
    }

    private async Task HandleSubmit()
    {
        Client.HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", CurrentUser.AccessToken);
        var result = await Client.PaymentPromisesPOSTAsync(promiseRequest);
        if (result.Success)
        {
            message = "Promise registered successfully!";
            StateHasChanged(); // Forcer le rafraîchissement
            await Task.Delay(3000);
            Navigation.NavigateTo("/myaccounts");
        }
        else
        {
            message = result.Message;
        }
    }
}
