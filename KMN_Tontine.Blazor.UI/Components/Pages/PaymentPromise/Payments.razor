@page "/payments"
@using System.Net.Http.Headers
@inject IClient Client
@inject NavigationManager Navigation
@inject CurrentUserService CurrentUser

<h3 class="text-2xl font-bold text-indigo-700 mb-6">💸 Promesses de paiement</h3>

@if (!isAuthorized)
{
    <div class="text-red-600 font-semibold">Vous devez être connecté pour accéder à cette page.</div>
}
else if (promises == null)
{
    <p class="text-gray-600">Chargement des promesses de paiement...</p>
}
else
{
    <div class="mb-4 flex flex-col md:flex-row md:items-center md:gap-6">
        <div>
            <label class="block mb-1 font-medium text-gray-700">Trier par</label>
            <select class="form-select w-full md:w-48" @onchange="OnSortChanged">
                <option value="date">📅 Date</option>
                <option value="amount">💰 Montant</option>
            </select>
        </div>
    </div>

    @if (!filteredPromises.Any())
    {
        <p class="text-gray-500">Aucune promesse trouvée pour le compte sélectionné.</p>
    }
    else
    {
        <div class="space-y-4">
            @foreach (var promise in filteredPromises)
            {
                <div class="bg-white shadow-md rounded-lg overflow-hidden">
                    <div class="bg-indigo-50 px-6 py-4">
                        <div class="flex justify-between items-center">
                            <div>
                                <h4 class="text-lg font-semibold text-indigo-900">
                                    Promesse @promise.Reference du @promise.CreatedDate.ToString("dd/MM/yyyy")
                                </h4>
                                <p class="text-sm text-gray-600">
                                    Date prévue : @promise.PromiseDate.ToString("dd/MM/yyyy")
                                </p>
                            </div>
                            <div class="text-right">
                                <span class="text-lg font-bold text-purple-700">
                                    Total : @promise.TotalAmountPromised.ToString("C")
                                </span>
                                <div class="mt-2">
                                    @if (!promise.IsFulfilled)
                                    {
                                        <button class="text-blue-600 hover:text-blue-800 text-sm px-3 py-1"
                                                @onclick="() => OpenEdit(promise)">
                                            ✏️ Modifier
                                        </button>
                                        <button class="text-red-600 hover:text-red-800 text-sm px-3 py-1"
                                                @onclick="() => DeletePromise(promise.Id)">
                                            🗑️ Annuler
                                        </button>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="p-4">
                        <table class="w-full">
                            <tr>
                                @foreach (var account in promise.Accounts)
                                {
                                    <td class="px-4">
                                        <div class="flex flex-col items-center gap-2">
                                            <span class="bg-blue-100 text-blue-800 px-2 py-0.5 rounded-full text-sm">
                                                @account.AccountName
                                            </span>
                                            <span class="text-lg font-semibold">
                                                @account.AmountPromised.ToString("C")
                                            </span>
                                        </div>
                                    </td>
                                }
                            </tr>
                            <tr>
                                <td colspan="4" class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-center">
                                        @if (promise.IsFulfilled)
                                        {
                                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                                            Validée
                                        </span>
                                        }
                                        else if (promise.AmountPaid > 0 && promise.AmountPaid < promise.TotalAmountPromised)
                                        {
                                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-orange-100 text-orange-800">
                                            Incomplet (@((promise.AmountPaid / promise.TotalAmountPromised * 100).ToString("0"))%)
                                        </span>
                                        }
                                        else if (promise.AmountPaid > 0)
                                        {
                                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
                                            Paiement partiel
                                        </span>
                                        }
                                        else
                                        {
                                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800">
                                            En attente
                                        </span>
                                        }
                                </td>
                            </tr>
                        </table>
                    </div>
                </div>
            }
        </div>
    }
}

<PromiseDialog MemberId="@editMemberId"
               IsOpen="@isEditOpen"
               IsOpenChanged="OnEditOpenChanged"
               OnPromiseCreated="ReloadPromises"
               PromiseId="@editPromiseId"
               IsEdit="@(editPromiseId.HasValue)" />

@if (showDeleteDialog)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
        <div class="bg-white p-6 rounded-lg shadow-xl">
            <h3 class="text-lg font-semibold mb-4">Confirmer la suppression</h3>
            <p>Êtes-vous sûr de vouloir supprimer cette promesse ?</p>
            <div class="mt-4 flex justify-end space-x-2">
                <button class="px-4 py-2 bg-gray-200 rounded hover:bg-gray-300"
                        @onclick="() => showDeleteDialog = false">
                    Annuler
                </button>
                <button class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"
                        @onclick="ConfirmDelete">
                    Supprimer
                </button>
            </div>
        </div>
    </div>
}

@code {
    private List<PaymentPromiseResponse>? promises;
    private IEnumerable<PaymentPromiseResponse> filteredPromises = 
        Enumerable.Empty<PaymentPromiseResponse>();
    private HashSet<string> accountNames = new();
    private bool isAuthorized = false;
    private string selectedAccount = string.Empty;
    private string selectedSort = "date";
    private bool isEditOpen = false;
    private int? editPromiseId = null;
    private Guid editMemberId = Guid.Empty;

    private bool showDeleteDialog = false;
    private int? idToDelete = null;

    protected override async Task OnInitializedAsync()
    {
        await CurrentUser.LoadUserInfoAsync();

        if (string.IsNullOrEmpty(CurrentUser.UserName))
        {
            isAuthorized = false;
            Navigation.NavigateTo("/login");
            return;
        }

        isAuthorized = true;
        await ReloadPromises();
    }

    private void OnSortChanged(ChangeEventArgs e)
    {
        selectedSort = e.Value?.ToString() ?? "date";
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        var query = promises?.AsEnumerable() ?? Enumerable.Empty<PaymentPromiseResponse>();

        if (!string.IsNullOrWhiteSpace(selectedAccount))
            query = query.Where(p => p.Accounts.Any(a => a.AccountName == selectedAccount));

        // Trier les promesses
        query = selectedSort switch
        {
            "amount" => query.OrderByDescending(p => p.TotalAmountPromised),
            _ => query.OrderByDescending(p => p.CreatedDate)
        };

        filteredPromises = query;
    }

    private void OpenEdit(PaymentPromiseResponse promise)
    {
        editPromiseId = promise.Id;
        editMemberId = CurrentUser.UserId;
        isEditOpen = true;
    }

    private Task OnEditOpenChanged(bool value)
    {
        isEditOpen = value;
        if (!isEditOpen)
        {
            editPromiseId = null;
            editMemberId = Guid.Empty;
        }
        return Task.CompletedTask;
    }

    private async Task ReloadPromises()
    {
        Client.HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", CurrentUser.AccessToken);
        promises = (await Client.ByMemberAsync(CurrentUser.UserId)).ToList();
        accountNames = promises.SelectMany(p => p.Accounts.Select(a => a.AccountName)).ToHashSet();
        ApplyFilters();
    }

    private void DeletePromise(int id)
    {
        idToDelete = id;
        showDeleteDialog = true;
    }

    private async Task ConfirmDelete()
    {
        if (idToDelete.HasValue)
        {
            await Client.PaymentPromisesDELETEAsync(idToDelete.Value);
            await ReloadPromises();
        }
        showDeleteDialog = false;
        idToDelete = null;
    }
}
