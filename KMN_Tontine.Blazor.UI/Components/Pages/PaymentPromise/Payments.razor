@page "/payments"
@attribute [Authorize]
@inject KMN_Tontine.Blazor.UI.Services.Base.IClient Client
@inject CurrentUserService CurrentUser
@inject NavigationManager Navigation
@using System.Net.Http.Headers

<h3 class="text-2xl font-bold text-indigo-700 mb-6">💸 Payment Promises</h3>

<div class="relative">
    <EditPaymentPromiseDialog IsOpen="@isEditOpen"
                              IsOpenChanged="OnEditOpenChanged"
                              Promise="@selectedPromise"
                              OnSuccess="ReloadPromises" />
</div>

<div class="relative">
    <DeleteConfirmationDialog IsOpen="@showDeleteDialog"
                              IsOpenChanged="OnDeleteDialogClosed"
                              OnConfirmed="ConfirmDelete" />
</div>

@if (!isAuthorized)
{
    <div class="text-red-600 font-semibold">You must be logged in to access this page.</div>
}
else if (promises == null)
{
    <p class="text-gray-600">Loading payment promises...</p>
}
else
{
    <div class="mb-4 flex flex-col md:flex-row md:items-center md:gap-6">
        <div class="mb-2 md:mb-0">
            <label class="block mb-1 font-medium text-gray-700">Filter by Account</label>
            <select class="form-select w-full md:w-64" @onchange="OnFilterChanged">
                <option value="">-- All accounts --</option>
                @foreach (var acc in accountNames)
                {
                    <option value="@acc">@acc</option>
                }
            </select>
        </div>
        <div>
            <label class="block mb-1 font-medium text-gray-700">Sort by</label>
            <select class="form-select w-full md:w-48" @onchange="OnSortChanged">
                <option value="date">📅 Date</option>
                <option value="amount">💰 Amount</option>
            </select>
        </div>
    </div>

    @if (!filteredPromises.Any())
    {
        <p class="text-gray-500">No payment promises found for the selected account.</p>
    }
    else
    {
        <div class="overflow-x-auto">
            <table class="min-w-full bg-white shadow-md rounded-lg overflow-hidden">
                <thead class="bg-indigo-600 text-white">
                    <tr>
                        <th class="px-6 py-3 text-left text-sm font-semibold">Date</th>
                        <th class="px-6 py-3 text-left text-sm font-semibold">Account</th>
                        <th class="px-6 py-3 text-left text-sm font-semibold">Amount</th>
                        <th class="px-6 py-3 text-left text-sm font-semibold">Expected Date</th>
                        <th class="px-6 py-3 text-left text-sm font-semibold">Status</th>
                        <th class="px-6 py-3 text-left text-sm font-semibold">Actions</th>
                    </tr>
                </thead>
                <tbody class="divide-y divide-gray-200">
                    @foreach (var p in filteredPromises)
                    {
                        var isEditSelected = selectedPromise != null && selectedPromise.Id == p.Id;
                        var isDeleteSelected = idToDelete == p.Id;
                        <tr class="transition-all duration-300 ease-in-out hover:bg-gray-50
                            @(isEditSelected ? "bg-yellow-100 border-l-4 border-yellow-500 shadow-md scale-[1.01]" : isDeleteSelected ? "bg-red-100 border-l-4 border-red-500 shadow-md scale-[1.01]" : "")">
                            <td class="px-6 py-4 whitespace-nowrap">@p.CreatedDate.ToShortDateString()</td>
                            <td class="px-6 py-4 whitespace-nowrap">@p.AccountName</td>
                            <td class="px-6 py-4 whitespace-nowrap">@p.AmountPromised.ToString("C")</td>
                            <td class="px-6 py-4 whitespace-nowrap">@p.PromiseDate.ToShortDateString()</td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                @(p.IsFulfilled ? "✅ Confirmed" : "⏳ Pending")
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap space-x-2">
                                <button class="text-blue-600 hover:underline text-sm" @onclick="() => OpenEdit(p)">✏️ Edit</button>
                                <button class="text-red-600 hover:underline text-sm" @onclick="() => DeletePromise(p.Id)">🗑️ Cancel</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
}

@code {
    private List<PaymentPromiseResponse>? promises;
    private List<PaymentPromiseResponse> filteredPromises = new();
    private HashSet<string> accountNames = new();
    private bool isAuthorized = false;
    private string selectedAccount = string.Empty;
    private string selectedSort = "date";
    private bool isEditOpen = false;
    private UpdatePaymentPromiseRequest? selectedPromise;

    private bool showDeleteDialog = false;
    private int? idToDelete = null;

    protected override async Task OnInitializedAsync()
    {
        await CurrentUser.LoadUserInfoAsync();

        if (string.IsNullOrEmpty(CurrentUser.UserName))
        {
            isAuthorized = false;
            Navigation.NavigateTo("/login");
            return;
        }

        isAuthorized = true;
        await ReloadPromises();
    }

    private void OnFilterChanged(ChangeEventArgs e)
    {
        selectedAccount = e.Value?.ToString() ?? string.Empty;
        ApplyFilters();
    }

    private void OnSortChanged(ChangeEventArgs e)
    {
        selectedSort = e.Value?.ToString() ?? "date";
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        var query = promises?.AsEnumerable() ?? Enumerable.Empty<PaymentPromiseResponse>();

        if (!string.IsNullOrWhiteSpace(selectedAccount))
            query = query.Where(p => p.AccountName.ToString() == selectedAccount);

        query = selectedSort switch
        {
            "amount" => query.OrderByDescending(p => p.AmountPromised),
            _ => query.OrderByDescending(p => p.CreatedDate)
        };

        filteredPromises = query.ToList();
    }

    private void OpenEdit(PaymentPromiseResponse p)
    {
        selectedPromise = new UpdatePaymentPromiseRequest
            {
                Id = p.Id,
                AmountPromised = p.AmountPromised,
                PromiseDate = p.PromiseDate
            };
        isEditOpen = true;
    }

    private Task OnEditOpenChanged(bool value)
    {
        isEditOpen = value;
        if (!isEditOpen)
        {
            selectedPromise = null; // 👉 Ici la sélection est annulée à la fermeture
        }
        return Task.CompletedTask;
    }

    private async Task ReloadPromises()
    {
        Client.HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", CurrentUser.AccessToken);
        promises = (await Client.ByMemberAsync(Guid.Parse(CurrentUser.UserId))).ToList();
        accountNames = promises.Select(p => p.AccountName.ToString()).ToHashSet();
        ApplyFilters();
    }

    private void DeletePromise(int id)
    {
        idToDelete = id;
        showDeleteDialog = true;
    }

    private async Task ConfirmDelete()
    {
        if (idToDelete.HasValue)
        {
            Client.HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", CurrentUser.AccessToken);
            await Client.PaymentPromisesDELETEAsync(idToDelete.Value); // Assure-toi que cette méthode existe
        }
        await ReloadPromises(); // Rafraîchir la liste
        idToDelete = null;
    }

    private Task OnDeleteDialogClosed(bool value)
    {
        showDeleteDialog = value;
        if (!value)
        {
            idToDelete = null;
        }
        return Task.CompletedTask;
    }
}
