@* Components/TransactionDialog.razor *@
@inject IClient Client
@inject CurrentUserService CurrentUser

@if (IsOpen)
{
    <div class="fixed inset-0 bg-gray-600 bg-opacity-10 overflow-y-auto h-full w-full z-50 flex items-center justify-center" @onclick="AttemptCloseOutside">
        <div class="relative mx-auto p-6 border w-full max-w-md shadow-lg rounded-md bg-white" @onclick:stopPropagation>
            @* Empêche la fermeture en cliquant à l'intérieur de la dialog *@

            <div class="mt-3 text-center">
                <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">
                    @(IsCredit ? "💰 Créditer le compte" : "💸 Débiter le compte")
                </h3>

                @if (Account != null)
                {
                    <div class="mb-4 text-sm text-gray-600 bg-gray-50 p-3 rounded">
                        Compte : <strong>@DisplayAccountName</strong> <br />
                        Type : <strong>@Account.Type</strong> <br />
                        Solde Actuel : <strong>@Account.Balance.ToString("C")</strong>
                    </div>

                    <div class="px-4 py-3 space-y-4">
                        <div>
                            <label for="amount" class="block text-sm font-medium text-gray-700 text-left">Montant</label>
                            <input type="number" id="amount" @bind="amount" step="0.01" min="0.01"
                                   class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                                   placeholder="0.00" />
                        </div>
                        <div>
                            <label for="comment" class="block text-sm font-medium text-gray-700 text-left">Commentaire (Optionnel)</label>
                            <input type="text" id="comment" @bind="comment"
                                   class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                                   placeholder="Ex: Cotisation mensuelle, Remboursement prêt..." />
                        </div>
                    </div>

                    @if (!string.IsNullOrWhiteSpace(errorMessage))
                    {
                        <div class="my-3 p-3 bg-red-100 text-red-700 rounded">
                            @errorMessage
                        </div>
                    }

                    <div class="items-center px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse border-t mt-4">
                        <button type="button"
                                class="@($"inline-flex justify-center w-full sm:w-auto rounded-md border border-transparent shadow-sm px-4 py-2 text-base font-medium text-white focus:outline-none focus:ring-2 focus:ring-offset-2 sm:ml-3 sm:text-sm {(IsCredit ? "bg-green-600 hover:bg-green-700 focus:ring-green-500" : "bg-yellow-600 hover:bg-yellow-700 focus:ring-yellow-500")} {(isLoading || amount <= 0 ? "opacity-50 cursor-not-allowed" : "")}")"
                                @onclick="HandleSubmit" disabled="@(isLoading || amount <= 0)">
                            @if (isLoading)
                            {
                                <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                                <span>Traitement...</span>
                            }
                            else
                            {
                                <span>@(IsCredit ? "Confirmer Crédit" : "Confirmer Débit")</span>
                            }
                        </button>
                        <button type="button"
                                class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:w-auto sm:text-sm"
                                @onclick="HandleClose">
                            Annuler
                        </button>
                    </div>
                }
                else
                {
                    <p class="text-red-500">Erreur: Aucun compte sélectionné.</p>
                    <div class="items-center px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse border-t mt-4">
                        <button type="button"
                                class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:w-auto sm:text-sm"
                                @onclick="HandleClose">
                            Fermer
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
}


@code {
    [Parameter] public AccountResponse? Account { get; set; }
    [Parameter] public bool IsCredit { get; set; } = true;
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback OnClose { get; set; } // Pour notifier le parent de fermer
    [Parameter] public EventCallback OnSuccess { get; set; } // Pour notifier le parent du succès

    private decimal amount;
    private string comment = string.Empty;
    private bool isLoading = false;
    private string? errorMessage;

    // Helper pour afficher le nom du compte
    private string DisplayAccountName => !string.IsNullOrWhiteSpace(Account?.MemberFullName) ? Account.MemberFullName : "🏛 Association";

    // Réinitialise le formulaire quand les paramètres changent (surtout quand on ouvre)
    protected override void OnParametersSet()
    {
        if (IsOpen && !isLoading) // Ne pas réinitialiser si une opération est en cours
        {
            // Réinitialiser seulement si IsOpen est vrai et qu'on n'était pas déjà en chargement
            // Si on veut toujours réinitialiser à l'ouverture, on peut affiner cette logique
        }
        // Optionnellement, réinitialiser amount/comment ici si nécessaire à chaque ouverture
        if (!IsOpen) // Si la dialog est fermée, s'assurer que l'état est propre
        {
            ResetForm();
        }
    }


    private async Task HandleSubmit()
    {
        // --- AJOUT DE LA VÉRIFICATION ---
        if (IsCredit && Account != null && !string.IsNullOrWhiteSpace(Account.MemberFullName))
        {
            errorMessage = "L'opération de crédit direct est réservée aux comptes de l'association.";
            StateHasChanged(); // Afficher le message d'erreur
            return; // Arrêter l'exécution
        }
        // --- FIN DE L'AJOUT ---

        if (Account == null || amount <= 0)
        {
            errorMessage = "Veuillez entrer un montant valide.";
            return;
        }

        isLoading = true;
        errorMessage = null;
        StateHasChanged(); // Mettre à jour l'UI pour montrer le spinner

        try
        {
            // Assurez-vous que CreateTransactionCommand et TransactionType existent et correspondent
            var command = new CreateTransactionRequest
                {
                    AccountId = Account.Id, // Assurez-vous que AccountResponse a bien une propriété Id (string ou int?)
                    Amount = amount,
                    Description = comment,
                    TontineId = Account.TontineId, // Assurez-vous que AccountResponse a bien une propriété TontineId
                    Type = IsCredit ? TransactionType.Credit : TransactionType.Retrait // Utilise l'enum
                };

            // Ajouter l'authentification
            Client.HttpClient.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", CurrentUser.AccessToken);

            // Appel API
            var result = await Client.TransactionsPOSTAsync(command); // Assurez-vous que cette méthode existe

            if(!result.Success)
            {
                errorMessage = result.Message;
                return;
            }
            // Succès ! Notifier le parent et fermer
            await OnSuccess.InvokeAsync(); // Le parent va recharger les comptes
            // On ne ferme pas ici explicitement, le parent le fera via ReloadAccounts qui mettra IsOpen à false (ou OnSuccess le fera)
            // Correction: Il est souvent mieux que la Dialog se ferme elle-même après succès.
            // ResetForm(); // Nettoyer avant de fermer implicitement par le parent
            // await OnClose.InvokeAsync(); // Notifier le parent pour qu'il mette IsOpen à false.

        }
        catch (ApiException ex)
        {
            // Essayer d'extraire un message d'erreur plus spécifique de l'API si possible
            Console.WriteLine($"API Error: {ex.StatusCode} - {ex.Response}");
            errorMessage = $"Erreur API ({ex.StatusCode}): Vérifiez les détails de la transaction."; // Message générique
            // Vous pourriez parser ex.Response si elle contient du JSON avec des détails d'erreur
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Generic Error: {ex.Message}");
            errorMessage = "Une erreur inattendue est survenue.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged(); // Mettre à jour l'UI pour enlever le spinner/afficher l'erreur
        }
        // Si succès, le parent est notifié via OnSuccess. Le parent devrait gérer la fermeture.
        // Si échec, on reste ouvert pour afficher l'erreur.
    }

    private async Task HandleClose()
    {
        ResetForm();
        await OnClose.InvokeAsync(); // Notifier le parent de fermer la dialog
    }

    // Permet de fermer en cliquant à l'extérieur (optionnel)
    private async Task AttemptCloseOutside()
    {
        if (!isLoading) // Ne pas fermer si une opération est en cours
        {
            await HandleClose();
        }
    }

    private void ResetForm()
    {
        amount = 0;
        comment = string.Empty;
        errorMessage = null;
        isLoading = false; // S'assurer que isLoading est reset
    }
}