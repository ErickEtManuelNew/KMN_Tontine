@page "/admin/members"

@attribute [Authorize(Roles = $"{nameof(RoleType.Admin)},{nameof(RoleType.SuperAdmin)}")]
@inject KMN_Tontine.Blazor.UI.Services.Base.IClient Client
@inject NavigationManager Navigation
@inject CurrentUserService CurrentUser
@using KMN_Tontine.Blazor.UI.Services.Base
@using System.Net.Http.Headers

<h3 class="text-2xl font-bold text-indigo-700 mb-6">👥 Liste des membres</h3>

<div class="mb-4 max-w-md">
    <input type="text" class="form-control w-full" placeholder="🔍 Rechercher par nom ou email..." @bind="SearchTerm" @bind:event="oninput" />
</div>

<div class="relative">
    <DeactivateMemberDialog @bind-IsOpen="isDeactivateDialogOpen"
                            MemberFullName=@selectedMemberForDialog?.FullName
                            OnConfirmed="HandleDeactivateConfirmed"
                            IsLoading="isDeactivationLoading"
                            ErrorMessage=@deactivationErrorMessage />
</div>

<div class="relative">
    <DetailMemberDialog @bind-IsOpen="isDetailDialogOpen"
                        Member="selectedMemberForDialog"
                        OnRoleChanged="HandleMemberRoleChanged" />
</div>

@if (members == null)
{
    <p class="text-gray-500">Chargement des membres...</p>
}
else if (!members.Any())
{
    <div class="alert alert-warning">Aucun membre inscrit pour le moment.</div>
}
else
{
    <div class="overflow-x-auto">
        <table class="min-w-full table-auto bg-white shadow rounded">
            <thead class="bg-indigo-600 text-white">
                <tr>
                    <th class="px-4 py-2 text-left cursor-pointer" @onclick='() => SortBy("FullName")'>
                        Nom @(sortColumn == "FullName" ? (sortAscending ? "▲" : "▼") : "")
                    </th>
                    <th class="px-4 py-2 text-left cursor-pointer" @onclick='() => SortBy("Email")'>
                        Email @(sortColumn == "Email" ? (sortAscending ? "▲" : "▼") : "")
                    </th>
                    <th class="px-4 py-2 text-left cursor-pointer" @onclick='() => SortBy("DateOfBirth")'>
                        Date de naissance @(sortColumn == "DateOfBirth" ? (sortAscending ? "▲" : "▼") : "")
                    </th>
                    <th class="px-4 py-2 text-left cursor-pointer" @onclick='() => SortBy("EmailConfirmed")'>
                        Statut @(sortColumn == "EmailConfirmed" ? (sortAscending ? "▲" : "▼") : "")
                    </th>
                    <th class="px-4 py-2 text-left cursor-pointer" @onclick='() => SortBy("Role")'>
                        Statut @(sortColumn == "Role" ? (sortAscending ? "▲" : "▼") : "")
                    </th>
                    <th class="px-4 py-2 text-left">Actions</th>
                </tr>

            </thead>
            <tbody>
                @foreach (var m in sortedMembers)
                {
                    // --- Déterminer si c'est l'utilisateur connecté ---
                    bool isCurrentUser = (CurrentUser.UserId != null && m.Id == CurrentUser.UserId);
                    <tr class="hover:bg-gray-50">
                        <td class="px-4 py-2">@m.FullName</td>
                        <td class="px-4 py-2">@m.Email</td>
                        <td class="px-4 py-2">@m.DateOfBirth.ToShortDateString()</td>
                        <td class="px-4 py-2">@(m.EmailConfirmed ? "✅ Confirmé" : "⏳ En attente")</td>
                        <td class="px-4 py-2">@m.Role.ToString()</td>
                        <td class="px-4 py-2 space-x-2">
                            <button class="text-blue-600 hover:underline text-sm" @onclick="() => OpenDetailDialog(m)">📄 Détails</button>
                            <button class="text-red-600 hover:underline text-sm disabled:opacity-50 disabled:cursor-not-allowed"
                                    @onclick="() => OpenDeactivateDialog(m)"
                                    disabled="@(isLoading || isCurrentUser)"
                                    title="@(isCurrentUser ? "Vous ne pouvez pas vous désactiver vous-même." : "Désactiver ce membre")">
                                @* <-- Info-bulle utile *@
                                🚫 Désactiver
                            </button>

                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<MemberResponse>? members;
    private List<MemberResponse> sortedMembers = new();
    private string sortColumn = "FullName";
    private bool sortAscending = true;
    private string _searchTerm = string.Empty;

    private bool isDeactivateDialogOpen = false;
    private MemberResponse? selectedMemberForDialog;
    private bool isDeactivationLoading = false; // Chargement spécifique à la désactivation
    private string? deactivationErrorMessage;

    private bool isDetailDialogOpen = false;

    private bool isLoading = false; // Indicateur de chargement global (pour chargement initial, rechargement...)

    protected override async Task OnInitializedAsync()
    {
        isLoading = true; // Indiquer chargement initial
        Client.HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", CurrentUser.AccessToken);
        var allMembers = (await Client.MembersAllAsync()).ToList();
        members = allMembers?.ToList() ?? new List<MemberResponse>(); // S'assurer que members n'est jamais null
        UpdateDisplayedMembers(); // Appliquer le filtre/tri initial
        isLoading = false; // Fin du chargement initial
    }

    private void ViewMember(string memberId)
    {
        Navigation.NavigateTo($"/admin/members/{memberId}");
    }

    // Propriété publique pour le binding, qui déclenche la mise à jour
    private string SearchTerm
    {
        get => _searchTerm;
        set
        {
            _searchTerm = value;
            UpdateDisplayedMembers(); // Appel de la mise à jour à chaque changement
        }
    }

    // Méthode centrale pour filtrer PUIS trier
    private void UpdateDisplayedMembers()
    {
        if (members == null) return; // S'assurer que les membres ont été chargés

        // 1. Filtrer d'abord sur la liste originale complète
        IEnumerable<MemberResponse> filteredMembers = members;
        if (!string.IsNullOrWhiteSpace(_searchTerm))
        {
            filteredMembers = members
                .Where(m => (m.FullName != null && m.FullName.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase))
                         || (m.Email != null && m.Email.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)));
        }

        // 2. Trier ensuite la liste filtrée
        sortedMembers = sortColumn switch
        {
            "Email" => (sortAscending ? filteredMembers.OrderBy(m => m.Email) : filteredMembers.OrderByDescending(m => m.Email)).ToList(),
            "DateOfBirth" => (sortAscending ? filteredMembers.OrderBy(m => m.DateOfBirth) : filteredMembers.OrderByDescending(m => m.DateOfBirth)).ToList(),
            "EmailConfirmed" => (sortAscending ? filteredMembers.OrderBy(m => m.EmailConfirmed) : filteredMembers.OrderByDescending(m => m.EmailConfirmed)).ToList(),
            _ => (sortAscending ? filteredMembers.OrderBy(m => m.FullName) : filteredMembers.OrderByDescending(m => m.FullName)).ToList()
        };

        // StateHasChanged(); // Normalement pas nécessaire car déclenché par le @bind, mais peut être ajouté si des problèmes persistent.
    }

    private void SortBy(string column)
    {
        if (sortColumn == column)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortColumn = column;
            sortAscending = true;
        }
        // Appliquer le nouveau tri sur les membres actuellement filtrés
        UpdateDisplayedMembers();
    }

    private void OpenDeactivateDialog(MemberResponse member)
    {
        if (isLoading || isDeactivationLoading) return; // Ne pas ouvrir si une autre op est en cours

        selectedMemberForDialog = member;
        deactivationErrorMessage = null; // Reset error message
        isDeactivateDialogOpen = true;
        StateHasChanged(); // Mettre à jour l'UI pour afficher la dialog
    }

    private void OpenDetailDialog(MemberResponse member)
    {
        if (isLoading || isDeactivationLoading) return; // Empêche l'ouverture si autre op en cours

        selectedMemberForDialog = member;
        isDetailDialogOpen = true;
        StateHasChanged();
    }

    private async Task HandleDeactivateConfirmed()
    {
        if (selectedMemberForDialog == null || isDeactivationLoading)
        {
            return;
        }

        isDeactivationLoading = true; // Démarrer le chargement spécifique
        deactivationErrorMessage = null;
        StateHasChanged(); // Mettre à jour la dialog (spinner)

        try
        {
            Client.HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", CurrentUser.AccessToken);
            await Client.MembersDELETEAsync(selectedMemberForDialog.Id); // Assure-toi que cette méthode existe
            await Task.Delay(1500); // Simuler un appel API
            Console.WriteLine($"Membre {selectedMemberForDialog.FullName} (ID: {selectedMemberForDialog.Id}) désactivé (simulation).");

            // Succès: Fermer la dialog et recharger la liste
            isDeactivateDialogOpen = false;
            selectedMemberForDialog = null;
            UpdateDisplayedMembers(); // Recharger la liste pour refléter le changement
            // Optionnel: Afficher une notification de succès
        }
        catch (ApiException ex)
        {
            Console.WriteLine($"API Error Deactivating: {ex.StatusCode} - {ex.Response}");
            deactivationErrorMessage = $"Erreur API ({ex.StatusCode}): Impossible de désactiver le membre.";
            // Laisser la dialog ouverte pour afficher l'erreur
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Generic Error Deactivating: {ex.Message}");
            deactivationErrorMessage = "Une erreur inattendue est survenue lors de la désactivation.";
            // Laisser la dialog ouverte pour afficher l'erreur
        }
        finally
        {
            isDeactivationLoading = false; // Fin du chargement spécifique
            StateHasChanged(); // Mettre à jour l'UI (arrêter spinner, afficher erreur si besoin)
        }
    }

    private async Task HandleMemberRoleChanged(RoleType newRole)
    {
        sortedMembers.Find(m => m.Id == selectedMemberForDialog.Id).Role = newRole;

        UpdateDisplayedMembers(); // Recharger la liste pour refléter le changement)
    }
}
