@page "/tontines/{TontineId:int}/members/add"
@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject IClient Client

<PageTitle>Ajouter un membre à la tontine</PageTitle>

@if (isLoading)
{
    <Loading IsLoading="true" Message="Chargement des membres disponibles..." />
}
else if (error != null)
{
    <ErrorMessage Message="@error" />
}
else
{
    <div class="py-10">
        <header>
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div class="md:flex md:items-center md:justify-between">
                    <div class="flex-1 min-w-0">
                        <h2 class="text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate">
                            Ajouter un membre à la tontine
                        </h2>
                    </div>
                    <div class="mt-4 flex md:mt-0 md:ml-4">
                        <button @onclick="NavigateBack" class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                            Retour
                        </button>
                    </div>
                </div>
            </div>
        </header>

        <main>
            <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
                <div class="mt-8">
                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <SuccessMessage Message="@successMessage" AutoDismissAfterSeconds="3" OnDismiss="@(() => successMessage = null)" />
                    }

                    <div class="mt-5 md:mt-0 md:col-span-2">
                        <div class="shadow sm:rounded-md sm:overflow-hidden">
                            <div class="px-4 py-5 bg-white space-y-6 sm:p-6">
                                <div class="grid grid-cols-6 gap-6">
                                    <div class="col-span-6">
                                        <label for="search" class="block text-sm font-medium text-gray-700">Rechercher un membre</label>
                                        <div class="mt-1 flex rounded-md shadow-sm">
                                            <input type="text" @bind="searchTerm" @bind:event="oninput" @onkeyup="HandleSearch" id="search" class="focus:ring-indigo-500 focus:border-indigo-500 flex-1 block w-full rounded-md sm:text-sm border-gray-300" placeholder="Nom, prénom ou email du membre">
                                        </div>
                                    </div>
                                </div>

                                @if (filteredMembres != null && filteredMembres.Any())
                                {
                                    <div class="mt-6">
                                        <div class="flex flex-col">
                                            <div class="-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
                                                <div class="py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8">
                                                    <div class="shadow overflow-hidden border-b border-gray-200 sm:rounded-lg">
                                                        <table class="min-w-full divide-y divide-gray-200">
                                                            <thead class="bg-gray-50">
                                                                <tr>
                                                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                                        Nom
                                                                    </th>
                                                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                                        Email
                                                                    </th>
                                                                    <th scope="col" class="relative px-6 py-3">
                                                                        <span class="sr-only">Actions</span>
                                                                    </th>
                                                                </tr>
                                                            </thead>
                                                            <tbody class="bg-white divide-y divide-gray-200">
                                                                @foreach (var membre in filteredMembres)
                                                                {
                                                                    <tr>
                                                                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                                                            @membre.Nom @membre.Prenom
                                                                        </td>
                                                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                                            @membre.Email
                                                                        </td>
                                                                        <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                                                            <button @onclick="() => AddMember(membre.Id)" class="text-indigo-600 hover:text-indigo-900">
                                                                                Ajouter
                                                                            </button>
                                                                        </td>
                                                                    </tr>
                                                                }
                                                            </tbody>
                                                        </table>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                                else if (!string.IsNullOrEmpty(searchTerm))
                                {
                                    <div class="text-center py-12">
                                        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                                        </svg>
                                        <h3 class="mt-2 text-sm font-medium text-gray-900">Aucun membre trouvé</h3>
                                        <p class="mt-1 text-sm text-gray-500">Essayez avec d'autres termes de recherche.</p>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>
}

@code {
    [Parameter]
    public int TontineId { get; set; }

    private List<MembreDto> membres;
    private List<MembreDto> filteredMembres;
    private bool isLoading = true;
    private string error;
    private string successMessage;
    private string searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadMembres();
    }

    private async Task LoadMembres()
    {
        try
        {
            isLoading = true;
            error = null;
            membres = (await Client.MembresAllAsync()).ToList();
            filteredMembres = membres;
        }
        catch (Exception ex)
        {
            error = "Une erreur s'est produite lors du chargement des membres.";
            Console.WriteLine($"Erreur : {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void HandleSearch()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredMembres = membres;
        }
        else
        {
            filteredMembres = membres
                .Where(m => 
                    m.Nom.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    m.Prenom.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    m.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo($"/tontines/{TontineId}");
    }

    private async Task AddMember(int membreId)
    {
        try
        {
            error = null;
            successMessage = null;

            await Client.TontinesAddMembreAsync(TontineId, membreId);

            successMessage = "Le membre a été ajouté à la tontine avec succès.";
            await Task.Delay(2000); // Attendre 2 secondes avant la redirection
            NavigationManager.NavigateTo($"/tontines/{TontineId}");
        }
        catch (Exception ex)
        {
            error = "Une erreur s'est produite lors de l'ajout du membre.";
            Console.WriteLine($"Erreur : {ex.Message}");
        }
    }
} 