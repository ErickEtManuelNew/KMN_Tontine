@page "/tontines/{Id:int}"
@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject IClient Client

<PageTitle>Détails de la tontine</PageTitle>

@if (isLoading)
{
    <Loading IsLoading="true" Message="Chargement des détails de la tontine..." />
}
else if (error != null)
{
    <ErrorMessage Message="@error" />
}
else if (tontine != null)
{
    <div class="py-10">
        <header>
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div class="md:flex md:items-center md:justify-between">
                    <div class="flex-1 min-w-0">
                        <h2 class="text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate">
                            @tontine.Nom
                        </h2>
                    </div>
                    <div class="mt-4 flex md:mt-0 md:ml-4">
                        <button @onclick="NavigateBack" class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                            Retour
                        </button>
                        <button @onclick="() => EditTontine(tontine.Id)" class="ml-3 inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                            Modifier
                        </button>
                    </div>
                </div>
            </div>
        </header>

        <main>
            <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
                <div class="mt-8">
                    <div class="bg-white shadow overflow-hidden sm:rounded-lg">
                        <div class="px-4 py-5 sm:px-6">
                            <h3 class="text-lg leading-6 font-medium text-gray-900">
                                Informations de la tontine
                            </h3>
                            <p class="mt-1 max-w-2xl text-sm text-gray-500">
                                Détails et paramètres de la tontine.
                            </p>
                        </div>
                        <div class="border-t border-gray-200">
                            <dl>
                                <div class="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                                    <dt class="text-sm font-medium text-gray-500">
                                        Description
                                    </dt>
                                    <dd class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                                        @tontine.Description
                                    </dd>
                                </div>
                                <div class="bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                                    <dt class="text-sm font-medium text-gray-500">
                                        Montant
                                    </dt>
                                    <dd class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                                        @tontine.Montant.ToString("N0") FCFA
                                    </dd>
                                </div>
                                <div class="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                                    <dt class="text-sm font-medium text-gray-500">
                                        Fréquence
                                    </dt>
                                    <dd class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                                        @tontine.Frequence
                                    </dd>
                                </div>
                                <div class="bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                                    <dt class="text-sm font-medium text-gray-500">
                                        Date de début
                                    </dt>
                                    <dd class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                                        @tontine.DateDebut.ToShortDateString()
                                    </dd>
                                </div>
                                <div class="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                                    <dt class="text-sm font-medium text-gray-500">
                                        Date de fin
                                    </dt>
                                    <dd class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                                        @tontine.DateFin.ToShortDateString()
                                    </dd>
                                </div>
                                <div class="bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                                    <dt class="text-sm font-medium text-gray-500">
                                        Statut
                                    </dt>
                                    <dd class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                                        <span class="@GetStatusClass(tontine.Statut) inline-flex rounded-full px-2 text-xs font-semibold leading-5">
                                            @tontine.Statut
                                        </span>
                                    </dd>
                                </div>
                            </dl>
                        </div>
                    </div>

                    <!-- Section des membres -->
                    <div class="mt-8 bg-white shadow overflow-hidden sm:rounded-lg">
                        <div class="px-4 py-5 sm:px-6">
                            <div class="flex justify-between items-center">
                                <div>
                                    <h3 class="text-lg leading-6 font-medium text-gray-900">
                                        Membres de la tontine
                                    </h3>
                                    <p class="mt-1 max-w-2xl text-sm text-gray-500">
                                        Liste des participants à la tontine.
                                    </p>
                                </div>
                                <button @onclick="() => AddMember(tontine.Id)" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                    <svg class="-ml-1 mr-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
                                    </svg>
                                    Ajouter un membre
                                </button>
                            </div>
                        </div>
                        <div class="border-t border-gray-200">
                            @if (membres != null && membres.Any())
                            {
                                <div class="overflow-x-auto">
                                    <table class="min-w-full divide-y divide-gray-200">
                                        <thead class="bg-gray-50">
                                            <tr>
                                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                    Nom
                                                </th>
                                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                    Email
                                                </th>
                                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                    Date d'adhésion
                                                </th>
                                                <th scope="col" class="relative px-6 py-3">
                                                    <span class="sr-only">Actions</span>
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody class="bg-white divide-y divide-gray-200">
                                            @foreach (var membre in membres)
                                            {
                                                <tr>
                                                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                                        @membre.Nom @membre.Prenom
                                                    </td>
                                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                        @membre.Email
                                                    </td>
                                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                        @membre.DateAdhesion.ToShortDateString()
                                                    </td>
                                                    <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                                        <button @onclick="() => RemoveMember(tontine.Id, membre.Id)" class="text-red-600 hover:text-red-900">
                                                            Retirer
                                                        </button>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                            else
                            {
                                <div class="text-center py-12">
                                    <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                                    </svg>
                                    <h3 class="mt-2 text-sm font-medium text-gray-900">Aucun membre</h3>
                                    <p class="mt-1 text-sm text-gray-500">Commencez par ajouter des membres à la tontine.</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private TontineDto tontine;
    private List<MembreDto> membres;
    private bool isLoading = true;
    private string error;

    protected override async Task OnInitializedAsync()
    {
        await LoadTontine();
        await LoadMembres();
    }

    private async Task LoadTontine()
    {
        try
        {
            isLoading = true;
            error = null;
            tontine = await Client.TontinesGETAsync(Id);
        }
        catch (Exception ex)
        {
            error = "Une erreur s'est produite lors du chargement de la tontine.";
            Console.WriteLine($"Erreur : {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadMembres()
    {
        try
        {
            membres = (await Client.MembresAllAsync()).ToList();
        }
        catch (Exception ex)
        {
            error = "Une erreur s'est produite lors du chargement des membres.";
            Console.WriteLine($"Erreur : {ex.Message}");
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/tontines");
    }

    private void EditTontine(int id)
    {
        NavigationManager.NavigateTo($"/tontines/{id}/edit");
    }

    private void AddMember(int tontineId)
    {
        NavigationManager.NavigateTo($"/tontines/{tontineId}/members/add");
    }

    private async Task RemoveMember(int tontineId, int membreId)
    {
        try
        {
            await Client.TontinesRemoveMembreAsync(tontineId, membreId);
            await LoadMembres();
        }
        catch (Exception ex)
        {
            error = "Une erreur s'est produite lors de la suppression du membre.";
            Console.WriteLine($"Erreur : {ex.Message}");
        }
    }

    private string GetStatusClass(string status)
    {
        return status.ToLower() switch
        {
            "active" => "bg-green-100 text-green-800",
            "en attente" => "bg-yellow-100 text-yellow-800",
            "terminée" => "bg-gray-100 text-gray-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }
} 