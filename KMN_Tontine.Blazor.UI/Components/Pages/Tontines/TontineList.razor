@page "/tontines"
@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject IClient Client
@inject IAuthenticationService AuthenticationService

<PageTitle>Liste des tontines</PageTitle>

<div class="py-10">
    <header>
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center">
                <h1 class="text-3xl font-bold leading-tight text-gray-900">
                    Tontines
                </h1>
                <button @onclick="CreateTontine" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                    <svg class="-ml-1 mr-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
                    </svg>
                    Nouvelle tontine
                </button>
            </div>
        </div>
    </header>
    <main>
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            @if (isLoading)
            {
                <Loading IsLoading="true" Message="Chargement des tontines..." />
            }
            else if (error != null)
            {
                <ErrorMessage Message="@error" />
            }
            else if (tontines == null || !tontines.Any())
            {
                <div class="text-center py-12">
                    <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    <h3 class="mt-2 text-sm font-medium text-gray-900">Aucune tontine</h3>
                    <p class="mt-1 text-sm text-gray-500">Commencez par créer une nouvelle tontine.</p>
                    <div class="mt-6">
                        <button @onclick="CreateTontine" class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                            <svg class="-ml-1 mr-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
                            </svg>
                            Nouvelle tontine
                        </button>
                    </div>
                </div>
            }
            else
            {
                <div class="mt-8 flex flex-col">
                    <div class="-my-2 -mx-4 overflow-x-auto sm:-mx-6 lg:-mx-8">
                        <div class="inline-block min-w-full py-2 align-middle md:px-6 lg:px-8">
                            <div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg">
                                <table class="min-w-full divide-y divide-gray-300">
                                    <thead class="bg-gray-50">
                                        <tr>
                                            <th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6">Nom</th>
                                            <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Description</th>
                                            <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Montant</th>
                                            <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Fréquence</th>
                                            <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Statut</th>
                                            <th scope="col" class="relative py-3.5 pl-3 pr-4 sm:pr-6">
                                                <span class="sr-only">Actions</span>
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody class="divide-y divide-gray-200 bg-white">
                                        @foreach (var tontine in tontines)
                                        {
                                            <tr>
                                                <td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6">@tontine.Nom</td>
                                                <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">@tontine.Description</td>
                                                <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">@tontine.Montant.ToString("N0") FCFA</td>
                                                <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">@tontine.Frequence</td>
                                                <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                                    <span class="@GetStatusClass(tontine.Statut) inline-flex rounded-full px-2 text-xs font-semibold leading-5">
                                                        @tontine.Statut
                                                    </span>
                                                </td>
                                                <td class="relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-6">
                                                    <button @onclick="() => ViewTontine(tontine.Id)" class="text-indigo-600 hover:text-indigo-900 mr-4">
                                                        Voir
                                                    </button>
                                                    <button @onclick="() => EditTontine(tontine.Id)" class="text-indigo-600 hover:text-indigo-900">
                                                        Modifier
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </main>
</div>

@code {
    private List<TontineDto> tontines;
    private bool isLoading = true;
    private string error;

    protected override async Task OnInitializedAsync()
    {
        await LoadTontines();
    }

    private async Task LoadTontines()
    {
        try
        {
            isLoading = true;
            error = null;
            tontines = (await Client.TontinesAllAsync()).ToList();
        }
        catch (Exception ex)
        {
            error = "Une erreur s'est produite lors du chargement des tontines.";
            Console.WriteLine($"Erreur : {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void CreateTontine()
    {
        NavigationManager.NavigateTo("/tontines/create");
    }

    private void ViewTontine(int id)
    {
        NavigationManager.NavigateTo($"/tontines/{id}");
    }

    private void EditTontine(int id)
    {
        NavigationManager.NavigateTo($"/tontines/{id}/edit");
    }

    private string GetStatusClass(string status)
    {
        return status.ToLower() switch
        {
            "active" => "bg-green-100 text-green-800",
            "en attente" => "bg-yellow-100 text-yellow-800",
            "terminée" => "bg-gray-100 text-gray-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }
} 